#example of a class in Python:
class Person:
    department = 'School of Information' #a class variable

    def set_name(self, new_name): #a method
        self.name = new_name
    def set_location(self, new_location):
        self.location = new_location

person = Person()
person.set_name('Christopher Brooks')
person.set_location('Ann Arbor, MI, USA')
print('{} live in {} and works in the department {}'.format(person.name,
    person.location, person.department))

    #output = Christopher Brooks live in Ann Arbor, MI, USA and works in the
    #department School of Information

#============================
#But functional programming causes one to think more heavily while chaining
#operations together. And this really is a sort of underlying theme in much of data
#science and date cleaning in particular. So, functional programming methods are
#often used in Python, and it's not uncommon to see a parameter for a function,
#be a function itself. The map built-in function is one example of a functional
#programming feature of Python, that I think ties together a number of aspects of
#the language. The map function signature looks like this. The first parameters of
#function that you want executed, and the second parameter, and every following
#parameter, is something which can be iterated upon.

#Here's an example of mapping the min function between two lists.
store1 = [10.00, 11.00, 12.34, 2.34]
store2 = [9.00, 11.10, 12.34, 2.01]
cheapest = map(min, store1, store2)
cheapest
#Out[66]:
#<map at 0x7f66e8184a20>

#Now let's iterate through the map object to see the values

for item in cheapest:
    print(item)
#    output =
#9.0
#11.0
#12.34
#2.01
