Sources for help:
StackOverflow
Wes McKinney : Python for Data Analysis
Matt Harrison: Leaning on the Pandas Library
planetpython.org / @planetpython

The series is one of the core data structures in pandas. You think of it a cross
between a list and a dictionary. The items are all stored in an order and there's
labels with which you can retrieve them. An easy way to visualize this is two
columns of data. The first is the special index, a lot like the dictionary keys.
While the second is your actual data. It's important to note that the data
column has a label of its own and can be retrieved using the .name attribute.

import pandas as pd
                        Init signature: pd.Series(data=None, index=None, dtype=None,
                                                    name=None, copy=False, fastpath=False)
                        Docstring:     One-dimensional ndarray with axis labels
                                                (including time series).

                        Labels need not be unique but must be any hashable type. The object
                        supports both integer- and label-based indexing and provides a host of
                        methods for performing operations involving the index. Statistical
                        methods from ndarray have been overridden to automatically exclude
                        missing data (currently represented as NaN)

                        Operations between Series (+, -, /, *, **) align values based on their
                        associated index values-- they need not be the same length. The result
                        index will be the sorted union of the two indexes.

                        Parameters
                        ----------
                        data : array-like, dict, or scalar value
                                    Contains data stored in Series
                        index : array-like or Index (1d)
                                    Values must be unique and hashable, same length as data. Index
                                     object (or other iterable of same length as data) Will default to
                                     RangeIndex(len(data)) if not provided. If both a dict and index
                                     sequence are used, the index will override the keys found in the
                                     dict.
                        dtype : numpy.dtype or None
                         If None, dtype will be inferred
                        copy : boolean, default False
                         Copy input data
                        File:   /opt/conda/lib/python3.5/site-packages/pandas/core/series.py
                        Type:           type



import pandas as pd
pd.Series?
animals = ["tiger", "bear", "moose"]
pd.Series(animals)

    output =        0     tiger
                            1    bear
                            2   moose
                            dtype: object


numbers = [1,2,3]
pd.Series(numbers)
        output =       0            1
                                1           2
                                2           3
                                dtype: int64

The most important is how num pi and thus pandas handle missing data. In Python,
we have the none type to indicate a lack of data. But what do we do if we want to
have a typed list like we do in the series object?
neath, pandas does some type conversion. If we create a list of strings and we
have one element, a None type, pandas inserts it as a None and uses the type
object for the underlying array. If we create a list of numbers, integers or floats,
and put in the None type, pandas automatically converts this to a special floating
point value designated as NAN, which stands for not a number.
For those who might not have done scientific computing in Python before,
this is a pretty important point. NAN is not none ; the equality test is false.


animals = ["tiger", "bear", "none"]
pd.Series(animals)

                    output =        0     tiger
                                            1    bear
                                            2   None
                                            dtype: object

if your list of values in the index object are not aligned with the keys in your
dictionary  pandas overrides the automatic creation to favor only and all
of the indices values that you provided. So it will ignore it from your dictionary,
all keys, which are not in your index, and pandas will add non type or NAN values
for any index value you provide, which is not in your dictionary key list.


numbers = [1,2, None]
pd.Series(numbers)
                    output =       0            1
                                            1           2
                                            2           NaN
                                            dtype: int64

        sports = {'Archery': 'Bhutan',
          'Golf': 'Scotland',
          'Sumo': 'Japan',
          'Taekwondo': 'South Korea'}
s = pd.Series(sports, index=['Golf', 'Sumo', 'Hockey'])
s

output:           Golf      Scotland
                        Sumo         Japan
                        Hockey         NaN
                        dtype: object
